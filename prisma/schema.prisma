generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  userId                  String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  emailVerifiedAt         DateTime?
  profile                 UserProfile?
  userSourceConnections   UserConnections[]       @relation("SourceUser")
  userTargetConnections   UserConnections[]       @relation("TargetUser")
  notifications           UserNotifications[]     @relation("Receiver")
  notificator             UserNotifications[]     @relation("Sender")
  sessions                UserSessions[]
  blacklistedTokens       UserBlacklistedTokens[]
  sentReports             UserReports[]           @relation("Sender")
  receivedReports         ReportDetails[]
  logs                    UserLogs[]
  blogs                   Blogs[]
  likedBlogs              BlogLikes[]
  likedCommentsAndReplies BlogCommentLikes[]
  commentedBlogs          BlogComments[]
  repliedComments         BlogCommentReplies[]
  drafts                  Draft[]
  createdAt               DateTime                @default(now())
  role                    Role                    @default(USER)
  status                  UserStatus              @default(ACTIVE)
}

model UserProfile {
  profileId      String  @id @default(cuid())
  userId         String  @unique
  user           Users   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  firstName      String  @db.VarChar(50)
  middleName     String? @db.VarChar(50)
  lastName       String  @db.VarChar(80)
  profilePicture String?
  profileCover   String?
  bio            String? @db.VarChar(255)
}

model UserConnections {
  connectionId String           @id @default(cuid())
  sourceUser   Users            @relation("SourceUser", fields: [sourceUserId], references: [userId])
  sourceUserId String
  targetUser   Users            @relation("TargetUser", fields: [targetUserId], references: [userId])
  targetUserId String
  status       ConnectionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?
}

model UserNotifications {
  notificationId     String              @id @default(cuid())
  message            String?
  receiverId         String?
  senderId           String?
  blogId             String?
  commentId          String?
  replyId            String?
  status             NotificationStatus  @default(NOT_SEEN)
  type               NotificationType
  receiver           Users?              @relation("Receiver", fields: [receiverId], references: [userId], onDelete: Cascade)
  sender             Users?              @relation("Sender", fields: [senderId], references: [userId], onDelete: SetNull)
  Blogs              Blogs?              @relation(fields: [blogId], references: [blogId], onDelete: SetNull)
  BlogComments       BlogComments?       @relation(fields: [commentId], references: [commentId], onDelete: SetNull)
  BlogCommentReplies BlogCommentReplies? @relation(fields: [replyId], references: [replyId], onDelete: SetNull)
  createdAt          DateTime            @default(now())
}

model UserSessions {
  sessionId    String   @id
  userId       String?
  refreshToken String
  users        Users?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model UserBlacklistedTokens {
  token     String   @id
  holderId  String?
  users     Users?   @relation(fields: [holderId], references: [userId], onDelete: Cascade)
  createdAt DateTime
  expiresAt DateTime
}

model UserReports {
  reportId    String         @id @default(cuid())
  userId      String?
  email       String?
  description String         @db.VarChar(500)
  type        ReportType
  category    ReportCategory
  details     ReportDetails?
  users       Users?         @relation("Sender", fields: [userId], references: [userId], onDelete: Cascade)
  createdAt   DateTime       @default(now())
}

model ReportDetails {
  reportDetailId    String              @id @default(cuid())
  reportId          String              @unique
  reportedUserId    String?
  reportedBlogId    String?
  reportedCommentId String?
  reportedReplyId   String?
  report            UserReports         @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
  users             Users?              @relation(fields: [reportedUserId], references: [userId])
  blogs             Blogs?              @relation(fields: [reportedBlogId], references: [blogId])
  comments          BlogComments?       @relation(fields: [reportedCommentId], references: [commentId])
  replies           BlogCommentReplies? @relation(fields: [reportedReplyId], references: [replyId])
}

model UserLogs {
  logId     String   @id @default(cuid())
  content   String
  userId    String?
  createdAt DateTime @default(now())
  users     Users?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  type      LogType  @default(OTHER)
}

model Blogs {
  blogId          String               @id @default(cuid())
  authorId        String
  coverImage      String?
  title           String?              @db.VarChar(80)
  description     String?              @db.VarChar(150)
  scores          Scores?
  notifications   UserNotifications[]
  status          BlogStatus           @default(ACTIVE)
  visiblity       BlogVisibility       @default(DRAFTED)
  tags            BlogTags[]
  contents        BlogContents[]
  likes           BlogLikes[]
  comments        BlogComments[]
  commentReplies  BlogCommentReplies[]
  receivedReports ReportDetails[]
  users           Users                @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime?
}

model BlogTags {
  tagId  String  @id @default(cuid())
  blogId String?
  tag    String  @db.VarChar(50)
  Blogs  Blogs?  @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model BlogContents {
  blogContentId String   @id @default(cuid())
  blogId        String
  index         Int
  title         String?  @db.VarChar(80)
  description   String?
  contentImage  String?
  blog          Blogs    @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model BlogLikes {
  blogLikeId String   @id @default(cuid())
  blogId     String?
  userId     String?
  createdAt  DateTime @default(now())
  users      Users?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  blog       Blogs?   @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model BlogComments {
  commentId       String               @id @default(cuid())
  blogId          String?
  userId          String?
  comment         String
  notifications   UserNotifications[]
  replies         BlogCommentReplies[]
  likes           BlogCommentLikes[]
  receivedReports ReportDetails[]
  scores          Scores?
  users           Users?               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  blog            Blogs?               @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model BlogCommentReplies {
  replyId          String               @id @default(cuid())
  commentId        String
  blogId           String
  userId           String
  mentionedReplyId String?
  reply            String
  users            Users                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  blog             Blogs                @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  comment          BlogComments         @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  likes            BlogCommentLikes[]
  mentionedReply   BlogCommentReplies?  @relation("MentionedReply", fields: [mentionedReplyId], references: [replyId], onDelete: Cascade)
  mentionedReplies BlogCommentReplies[] @relation("MentionedReply")
  notifications    UserNotifications[]
  receivedReports  ReportDetails[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model BlogCommentLikes {
  commentLikeId String              @id @default(cuid())
  userId        String?
  commentId     String?
  replyId       String?
  users         Users?              @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comment       BlogComments?       @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  reply         BlogCommentReplies? @relation(fields: [replyId], references: [replyId], onDelete: Cascade)
  createdAt     DateTime            @default(now())
}

model Scores {
  scoresId           String        @id @default(cuid())
  bestScore          Float
  controversialScore Float
  blogId             String?       @unique
  commentId          String?       @unique
  commentScores      BlogComments? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  blogScores         Blogs?        @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model Draft {
  draftId     String          @id @default(cuid())
  authorId    String?
  coverImage  String?
  title       String?         @db.VarChar(80)
  description String?
  tags        DraftTags[]
  contents    DraftContents[]
  Users       Users?          @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model DraftContents {
  draftContentId String  @id @default(cuid())
  draftId        String?
  index          Int
  title          String? @db.VarChar(80)
  description    String?
  contentImage   String?
  Draft          Draft?  @relation(fields: [draftId], references: [draftId], onDelete: Cascade)
}

model DraftTags {
  tagId   String  @id @default(cuid())
  draftId String?
  tag     String  @db.VarChar(50)
  Draft   Draft?  @relation(fields: [draftId], references: [draftId], onDelete: Cascade)
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum LogType {
  UPDATE_PASSWORD
  UPDATE_EMAIL
  UPDATE_NAME
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum NotificationStatus {
  SEEN
  NOT_SEEN
}

enum NotificationType {
  LIKED_BLOG
  COMMENT_BLOG
  REPLIED_COMMENT
  REJECTED_CONNECTION_STATUS
}

enum ReportType {
  ISSUE
  USER_REPORT
  BLOG_REPORT
  COMMENT_REPORT
  REPLY_REPORT
}

enum ReportCategory {
  BUG
  INAPPROPRIATE_BLOG
  SPAM
  HARASSMENT
  COPYRIGHT_VIOLATION
  FAKE_NEWS
  HATE_SPEECH
  IMPERSONATION
  PHISHING
  MALWARE
  OTHER
}

enum BlogStatus {
  ACTIVE
  FLAGGED
}

enum BlogVisibility {
  PRIVATE
  PUBLIC
  DRAFTED
}
